{"version":3,"sources":["Components/Formulario.jsx","Components/Citas.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Formulario","CrearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCitas","error","setError","altualizarCitaState","e","target","name","value","style","width","className","onSubmit","preventDefault","trim","id","uniqid","placeholder","type","onChange","Citas","Cita","Eliminar","color","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","listadoCitas","setListado","useEffect","setItem","stringify","eliminarCita","citasRestantes","filter","p","citas","length","newCita","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.348a81ee.chunk.js","sourcesContent":["import React,{Fragment,useState,useEffect} from 'react'\r\nimport uniqid from'uniqid'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Formulario = ({CrearCita}) => {\r\n\r\n    //State de citas\r\n    const [cita, setCitas] = useState({\r\n        mascota:'',\r\n        propietario:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n    });\r\n\r\n    //State de Error\r\n    const [error,setError] = useState(false);\r\n\r\n    const altualizarCitaState = e =>{\r\n        setCitas({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n            \r\n            \r\n\r\n        });\r\n    }\r\n\r\n    const {mascota,propietario,fecha,hora,sintomas} = cita;\r\n\r\n\r\n\r\n    //Cuando el usuario envia el formulario\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n            //Valida formulario\r\n            if(mascota.trim() === \"\" || propietario.trim() === \"\" || fecha.trim() === \"\" || hora.trim() === \"\" || sintomas === \"\"){\r\n               setError(true);\r\n               return;\r\n            }else{\r\n                setError(false);\r\n            }\r\n            \r\n            cita.id = uniqid();\r\n            //Reiniciar form\r\n            CrearCita(cita);\r\n\r\n            setCitas({\r\n                mascota:'',\r\n                propietario:'',\r\n                fecha:'',\r\n                hora:'',\r\n                sintomas:''\r\n            })\r\n    }\r\n\r\n    return (\r\n       <Fragment>\r\n           \r\n           <div style={{width:'400px'}} className=\"float-end\">\r\n           <h2>Crear cita</h2>\r\n           <form\r\n           onSubmit={submitCita}\r\n           >\r\n\r\n               <label>Nombre de la mascota:</label>\r\n               <input \r\n               className=\"form form-control\" \r\n               id=\"Nombre\"\r\n               placeholder=\"Nombre mascota\"\r\n               type=\"text\"\r\n               name=\"mascota\"\r\n               onChange={altualizarCitaState}\r\n               value={mascota}\r\n               />\r\n\r\n               \r\n               <label>Propietario:</label>\r\n               <input \r\n               className=\"form form-control\" \r\n               id=\"Propietario\"\r\n               placeholder=\"Propietario de la mascota\"\r\n               type=\"text\"\r\n               name=\"propietario\"\r\n               onChange={altualizarCitaState}\r\n               value={propietario}\r\n               />\r\n\r\n               \r\n               <label>Fecha:</label>\r\n               <input \r\n               className=\"form form-control\" \r\n               id=\"Fecha\"\r\n               type=\"date\"\r\n               name=\"fecha\"\r\n               onChange={altualizarCitaState}\r\n               value={fecha}\r\n               />\r\n\r\n               \r\n                <label>Hora:</label>\r\n               <input \r\n               className=\"form form-control\" \r\n               id=\"Hora\"\r\n               type=\"time\"\r\n               name=\"hora\"\r\n               onChange={altualizarCitaState}\r\n               value={hora}\r\n               />\r\n\r\n               \r\n            <label>Sintomas:</label>\r\n               <textarea \r\n               className=\"form form-control\" \r\n               id=\"Sintomas\"\r\n               placeholder=\"Sintomas\"\r\n               type=\"text\"\r\n               name=\"sintomas\"\r\n               onChange={altualizarCitaState}\r\n               value={sintomas}\r\n               />\r\n\r\n               {\r\n                   error ? (\r\n                   <div className=\"alert alert-danger mt-2\">\r\n                        Error... Todos los campos son necesarios.\r\n                   </div>\r\n                        ) : (\"\")\r\n               }\r\n\r\n               <div className=\"d-grid mt-2 \">\r\n               <button\r\n               className=\"btn btn-success\"\r\n               >Agregar cita</button>\r\n               </div>\r\n\r\n           </form>\r\n           </div>\r\n       </Fragment>\r\n      );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    CrearCita: PropTypes.func.isRequired\r\n  }\r\n  \r\n\r\n\r\n \r\nexport default Formulario;","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Citas = ({ Cita,Eliminar }) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"col\">\r\n                <div \r\n                className=\"bg-light p-2 rounded shadow\"\r\n                style={{ color: \"black\" }}>\r\n\r\n                    <div className=\"text-center pt-0 bg-light\">\r\n                        <h4>{Cita.mascota}</h4>\r\n                    </div>\r\n\r\n                    <p>Propietario: {Cita.propietario}</p>\r\n                    <p>Fecha: {Cita.fecha}</p>\r\n                    <p>hora: {Cita.hora}</p>\r\n\r\n                    <div className=\"d-grid\">\r\n                        <button \r\n                        className=\"btn btn-danger mb-2\"\r\n                        onClick={()=>Eliminar(Cita.id)}\r\n                        \r\n                        >Eliminar</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nCitas.propTypes = {\r\n    Cita: PropTypes.object.isRequired,\r\n    Eliminar: PropTypes.func.isRequired\r\n  }\r\n  \r\n\r\n\r\nexport default Citas;","import './index.css';\nimport React,{Fragment,useState,useEffect}from 'react'\nimport Formulario from './Components/Formulario'\nimport Citas from './Components/Citas'\n\n\nfunction App() {\n\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n  //Array que almacena todas las citas\n  const [listadoCitas,setListado] = useState(citasIniciales);\n\n  //Funcion que guarda las citas\n  const crearCita = (newCita)=>{\n    setListado([newCita,...listadoCitas]);\n  }\n\n  useEffect(()=>{\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if(citasIniciales){\n      localStorage.setItem('citas',JSON.stringify(listadoCitas))\n    }else{\n      localStorage.setItem('citas',JSON.stringify([]));\n    }\n    },[listadoCitas]);\n\n  //Funcion que elimina las citas\n  const eliminarCita = id =>{\n    const citasRestantes = listadoCitas.filter(p => p.id !== id);\n    setListado(citasRestantes);\n    \n  }\n\n  const citas = listadoCitas.length <= 0 ? 'Agrega una cita nueva' : 'Administra tus citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de citas</h1>\n      <div className=\"container\">\n        <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-2 float-none\">\n            <div className=\"col float-end\">\n\n              <Formulario\n              CrearCita={crearCita}\n              />\n\n            </div>\n            <div className=\"col\">\n            <h1>{citas}</h1>\n            <div className=\"container overflow-hidden\">\n              <div className=\"row row-cols-2 row-cols-md-3 row-cols-lg-3 gx-2 gy-2\">\n                \n              {\n                listadoCitas.length <= 0 ?(\n                  <h1></h1>\n                ) :(\n                listadoCitas.map(Cita => (\n                  <Citas\n                  key={Cita.id}\n                  Cita={Cita}\n                  Eliminar={eliminarCita}\n                  />)\n                ))\n              }\n              </div>\n              </div>\n            </div>\n        </div>\n      </div>\n    </Fragment>\n   \n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}